@import "./variables.scss";

// == MIXINS ==

// Creates a media query given a breakpoint
@mixin create-mq($breakpoint, $min-or-max: "min") {
  @if ($breakpoint == 0) {
    @content;
  } @else {
    @media screen and (#{$min-or-max}-width: $breakpoint *1px) {
      @content;
    }
  }
}

// For a breakpoint, this will create all column sizes
@mixin create-col-classes($modifier, $grid__cols, $breakpoint) {
  @include create-mq($breakpoint) {
    // Create base offset of 0 to be able to clear at wider screens
    .col-#{$modifier}-offset-0 {
      margin-left: 0;
    }

    @for $i from 1 through $grid__cols {
      // Create columns
      .col-#{$modifier}-#{$i} {
        flex-basis: (100 / ($grid__cols / $i)) * 1%;
      }

      // Create margin-left offsets
      .col-#{$modifier}-offset-#{$i} {
        margin-left: (100 / ($grid__cols / $i)) * 1%;
      }
    }
  }
}

:global {
  *,
  *:after,
  *:before {
    -webkit-box-sizing: border-box;
    -moz-box-sizing: border-box;
    box-sizing: border-box;
  }

  .container {
    max-width: $grid__bp-xl * 1px;
    margin: 0 auto;

    &--fluid {
      margin: 0;
      max-width: 100%;
    }
  }

  .row {
    display: flex;
    flex-wrap: wrap;
    width: 100%;
  }

  @each $modifier, $breakpoint in $map-grid-props {
    @include create-col-classes($modifier, $grid__cols, $breakpoint);
  }

  @each $modifier, $breakpoint in $map-grid-props {
    @include create-mq($breakpoint - 1, "max") {
      .hidden-#{$modifier}-down {
        display: none !important;
      }
    }
    @include create-mq($breakpoint, "min") {
      .hidden-#{$modifier}-up {
        display: none !important;
      }
    }
  }
}
