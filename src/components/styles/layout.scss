@import "./variables.scss";
@import "./utils.scss";

// == MIXINS ==

// For a breakpoint, this will create all column sizes
@mixin create-col-classes($modifier, $grid-cols, $breakpoint) {
  @include respond-above($modifier) {
    // Create base offset of 0 to be able to clear at wider screens
    .col-#{$modifier}-offset-0 {
      margin-left: 0;
    }

    @for $i from 1 through $grid-cols {
      // Create columns
      .col-#{$modifier}-#{$i} {
        flex-basis: (100 / ($grid-cols / $i)) * 1%;
      }

      // Create margin-left offsets
      .col-#{$modifier}-offset-#{$i} {
        margin-left: (100 / ($grid-cols / $i)) * 1%;
      }
    }
  }
}

// == LAYOUT ==

:global {
  html {
    box-sizing: border-box;
  }

  *,
  *:before,
  *:after {
    box-sizing: inherit;
  }

  .container {
    max-width: $max-width * 1px;
    margin: 0 auto;

    &--fluid {
      margin: 0;
      max-width: 100%;
    }
  }

  .row {
    display: flex;
    flex-wrap: wrap;
    width: 100%;
  }

  @each $modifier, $breakpoint in $breakpoints {
    @include create-col-classes($modifier, $grid-cols, $breakpoint);
  }

  [class*="col-"] {
    padding-left: #{$gutter/2}px;
    padding-right: #{$gutter/2}px;
  }

  // Create hidden classes at each breakpoint
  @each $modifier, $breakpoint in $breakpoints {
    $modifiers: map-keys($breakpoints);
    $i: index($breakpoints, ($modifier $breakpoint));

    @include respond-below(#{nth($modifiers, $i)}) {
      .hidden-#{$modifier}-down {
        display: none !important;
      }
    }

    @include respond-above($modifier) {
      .hidden-#{$modifier}-up {
        display: none !important;
      }
    }
  }
}

// == SPACING ==

:global {
  .vertSpacerSm {
    margin-bottom: 24px;
  }
}
