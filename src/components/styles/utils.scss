@import "./variables.scss";

// == CREATE MEDIA QUERIES ==

// @include respond-above(sm) {}
@mixin respond-above($breakpoint) {
  @if map-has-key($breakpoints-em, $breakpoint) {
    $breakpoint-value: map-get($breakpoints-em, $breakpoint);
    @media (min-width: ($breakpoint-value)) {
      @content;
    }
  } @else {
    @warn 'Invalid breakpoint: #{$breakpoint}.';
  }
}

// @include respond-below(sm) {}
@mixin respond-below($breakpoint) {
  @if map-has-key($breakpoints-px, $breakpoint) {
    $breakpoint-value: map-get($breakpoints-px, $breakpoint);
    @media (max-width: (px2em($breakpoint-value - 1))) {
      @content;
    }
  } @else {
    @warn 'Invalid breakpoint: #{$breakpoint}.';
  }
}

// @include respond-between(sm, md) {}
@mixin respond-between($lower, $upper) {
  @if map-has-key($breakpoints-px, $lower) and
    map-has-key($breakpoints-px, $upper)
  {
    $lower-breakpoint-px: map-get($breakpoints-px, $lower);
    $upper-breakpoint-px: map-get($breakpoints-px, $upper);
    $lower-breakpoint-em: px2em($lower-breakpoint-px);
    $upper-breakpoint-em: px2em($upper-breakpoint-px - 1);
    @media (min-width: ($lower-breakpoint-em)) and (max-width: ($upper-breakpoint-em)) {
      @content;
    }
  } @else {
    @if (map-has-key($breakpoints-px, $lower) == false) {
      @warn 'Your lower breakpoint was invalid: #{$lower}.';
    }
    @if (map-has-key($breakpoints-px, $upper) == false) {
      @warn 'Your upper breakpoint was invalid: #{$upper}.';
    }
  }
}
